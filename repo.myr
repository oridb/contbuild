use std
use escfmt

use "types"

pkg contbuild =
	const clone	: (t : target# -> bool)
	const head	: (t : target# -> std.result(byte[:], byte[:]))
	const sync	: (t : target# -> bool)
	const between	: (t : target#, from : byte[:], to : byte[:] -> std.result(byte[:][:], byte[:]))
	const checkout	: (t : target#, ref : byte[:] -> bool)
	const purge	: (t : target# -> bool)
	const summary	: (t : target#, hash : byte[:] -> byte[:])
	const commitmsg	: (t : target#, hash : byte[:] -> byte[:])
	const readcmd	: (t : target#, cmd : byte[:][:] -> \
		std.result((byte[:], byte[:]), (byte[:], byte[:])))
;;

const clone = {t
	var raw, cmd

	raw = [][:]
	if t.remote.len == 0 && std.fexists(t._repo)
		-> true
	elif t.remote.len != 0
		raw = ["test", "-e", t._repo, "||"][:]
	;;

	cmd = munge(t, t.scratch, raw, ["git", "clone", t.repo, t._repo][:])
	match readrawcmd(t, cmd)
	| `std.Ok (r, e):
		std.slfree(r)
		std.slfree(e)
		-> true
	| `std.Err (r, e):
		std.put("could not clone: {}\n", e)
		std.slfree(r)
		std.slfree(e)
		-> false
	;;
}

const purge = {t
	match readcmd(t, ["git", "clean", "-xfd"][:])
	| `std.Ok (r, e):
		std.slfree(r)
		std.slfree(e)
		-> true
	| `std.Err (r, e):
		std.put("could not purge: {}\n", e)
		std.slfree(r)
		std.slfree(e)
		-> false
	;;
}

const head = {t
	var s, tip

	tip = std.fmt("refs/heads/{}", t.tip)
	match readcmd(t, ["git", "show-ref", "-s", tip][:])
	| `std.Ok (r, e):
		s = std.sldup(std.strstrip(r))
		std.slfree(tip)
		std.slfree(r)
		std.slfree(e)
		-> `std.Ok s
	| `std.Err (r, e):
		std.slfree(tip)
		std.slfree(r)
		-> `std.Err e
	;;
}

const between = {t, from, to
	var range, ret

	if std.sleq(from, to)
		-> `std.Ok [][:]
	;;
	range = std.fmt("{}..{}", from, to)
	ret = [][:]
	match readcmd(t, ["git", "rev-list", range][:])
	| `std.Ok (r, e):
		std.slfree(range)
		std.slfree(e)
		for ln : std.bysplit(r, "\n")
			std.slpush(&ret, std.sldup(ln))
		;;
		-> `std.Ok ret
	| `std.Err (r, e):
		std.slfree(r)
		std.slfree(range)
		-> `std.Err e
	;;
}

const checkout = {t, rev
	match readcmd(t, ["git", "checkout", rev][:])
	| `std.Ok (r, e):
		std.slfree(r)
		std.slfree(e)
		-> true
	| `std.Err (r, e):
		std.slfree(r)
		std.slfree(e)
		-> false
	;;
}

const sync = {t
	var branch

	match readcmd(t, ["git", "fetch"][:])
	| `std.Ok (r, e):
		std.slfree(r)
		std.slfree(e)
		branch = std.fmt("origin/{}", t.tip)
		match readcmd(t, ["git", "reset", "--hard", branch][:])
		| `std.Ok (r1, e1):
			std.slfree(branch)
			std.slfree(r1)
			std.slfree(e1)
			-> true
		| `std.Err (r1, e1):
			std.slfree(r1)
			std.slfree(e1)
			std.slfree(branch)
			-> false
		;;
	| `std.Err (r, e):
		std.slfree(r)
		std.slfree(e)
		-> false
	;;
}

const summary = {t, hash
	-> showmsg(t, hash, "--format=%s")
}

const commitmsg = {t, hash
	-> showmsg(t, hash, "--format=%B")
}

const showmsg = {t, hash, fmt
	match readcmd(t, ["git", "show", "-s", fmt, hash][:])
	| `std.Ok (r, e):
		std.slfree(e)
		-> r
	| `std.Err (r, e):
		std.slfree(r)
		std.slfree(e)
		-> std.fmt("unknown commit {}", hash)
	;;
}

const readcmd = {t, cmd
	if t.remote.len == 0
		if !std.chdir(t._repo)
			-> `std.Err ("", std.fmt("could not chdir to {}\n", t._repo))
		;;
	;;

	cmd = munge(t, t._repo, [][:], cmd)
	-> readrawcmd(t, cmd)
}

const readrawcmd = {t, cmd
	var out, err, ret

	match std.espork(cmd)
	| `std.Ok (pid, stdin, stdout, stderr):
		match std.fslurp(stdout)
		| `std.Ok r:	out = r
		| `std.Err e:	out = std.fmt("unable to read output: {}", e)
		;;

		match std.fslurp(stderr)
		| `std.Ok e:	err = e
		| `std.Err e:	err = std.fmt("could not read stderr: {}", e)
		;;

		match std.wait(pid)
		| `std.Wsuccess:	ret = `std.Ok (out, err)
		| _:	ret = `std.Err (out, err)
		;;

		std.close(stdin)
		std.close(stdout)
		std.close(stderr)
	| `std.Err e:
		ret = `std.Err ("", std.sldup("unable to execute"))
	;;
	for c : cmd
		std.slfree(c)
	;;
	std.slfree(cmd)
	-> ret
}

const munge = {t, dir, raw, cmd
	var command

	command = [][:]
	if t.remote.len == 0
		for c : raw
			std.slpush(&command, std.sldup(c))
		;;
		for c : cmd
			std.slpush(&command, std.sldup(c))
		;;
	else
		std.slpush(&command, std.sldup("ssh"))
		std.slpush(&command, std.sldup(t.remote))
		std.slpush(&command, std.sldup("cd"))
		std.slpush(&command, std.fmt("{}", escfmt.sh(dir)))
		std.slpush(&command, std.sldup("&&"))
		for c : raw
			std.slpush(&command, std.sldup(c))
		;;
		for c : cmd
			std.slpush(&command, std.fmt("{}", escfmt.sh(c)))
		;;
	;;
	-> command
}
