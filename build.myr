use std
use sys

use "types"
use "repo"
use "report-html"
use "report-email"

pkg contbuild =
	const run : (build : build# -> void)
;;

const run = {build
	for t : build.targs
		std.put("cloning {}...\n", t.repo)
		clone(t)
	;;

	while true
		for t : build.targs
			std.chdir(t._repo)
			runonce(build, t)

		;;
		std.usleep(build.period)
	;;
}

const runonce = {build, targ
	var r : report
	var ranfix, ok

	r = [
		.build=[.cmd="", .out="", .err="", .ok=`Norun],
		.test=[.cmd="", .out="", .err="", .ok=`Norun],
		.fix=[.cmd="", .out="", .err="", .ok=`Norun],
		.clean=[.cmd="", .out="", .err="", .ok=`Norun],
	]

	for u : updates(targ)
		ranfix = false
		reset(&r)
		if !checkout(targ, u)
			continue
		;;
		std.put("test {}:{}\n", targ.name, u)
:retry
		if !testrun(targ, &r)
			ok = false
			if !ranfix && targ.fix.len > 0
				ranfix = true
				runcmd(targ, targ.fix, &r.fix)
				goto retry
			;;
		else
			ok = true
		;;
		report(build, targ, &r, ok, u)
		purge(targ)
	;;
	checkout(targ, targ.tip)
}

const testrun = {t, r
	-> runcmd(t, t.build, &r.build) && \
		runcmd(t, t.test, &r.test) && \
		runcmd(t, t.clean, &r.clean)
}


const updates = {targ
	var old, new, err, ret
	var changed = false

	err = ""
	old = [][:]
	new = [][:]
	ret = [][:]

	match head(targ)
	| `std.Ok r:
		old = r
	| `std.Err e:
		err = e
		goto error
	;;

	if !sync(targ)
		goto error
	;;


	match head(targ)
	| `std.Ok r:
		new = r
	| `std.Err e:
		err = e
		goto error
	;;

	match between(targ, old, new)
	| `std.Ok r:
		ret = r
		goto done
	| `std.Err e:
		err = e
		goto error
	;;
:error
	std.put("{}: unable to get updates: {}\n", targ.name, err)
:done
	std.slfree(err)
	std.slfree(old)
	std.slfree(new)
	-> reverse(ret)
}

const reverse = {lst
	for var i = 0; i < lst.len / 2; i++
		std.swap(&lst[i], &lst[lst.len - i - 1])
	;;
	-> lst
}

const report = {build, targ, report, status, hash
	var changed

	changed = isok(targ._status) != status

	/* update the book keeping */
	match status
	| true:	targ._status = `Succ
	| _:	targ._status = `Fail
	;;
	std.fput(build.logfd, "{} {} {}\n", hash, status, targ.name)
	std.slpush(&targ._hist, (std.sldup(hash), status))

	reporthtml(build, targ, report, hash);

	/* annoying reports should only get fired if we change */
	if changed
		reportemail(build, targ, report, hash)
	;;
}

const reset = {r
	resetcmd(&r.build)
	resetcmd(&r.test)
	resetcmd(&r.fix)
	resetcmd(&r.clean)
}

const resetcmd = {c
	set(&c.out, "")
	set(&c.err, "")
	c.ok = `Norun
}

const isok = {s
	match s
	| `Succ:	-> true
	| _:	-> false
	;;
}

const set = {s, v
	std.slfree(s#)
	s# = v
}

const runcmd = {t, cmd, r
	set(&r.cmd, std.strjoin(cmd, " "))
	if cmd.len == 0
		-> true
	;;
	match readcmd(t, cmd)
	| `std.Ok (out, err):
		set(&r.out, out)
		set(&r.err, err)
		r.ok = `Succ
	| `std.Err (out, err):
		set(&r.out, out)
		set(&r.err, err)
		r.ok = `Fail
	;;
	-> isok(r.ok)
}
