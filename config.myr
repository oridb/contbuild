use std
use bio
use inifile

use "types"

pkg contbuild =
	const load	: (path : byte[:] -> build#)
;;

const load = {cfg
	var default : target
	var targs, ini
	var tmpdir, scratch, period, htmlstyle
	var logfile, logfd

	match inifile.load(cfg)
	| `std.Ok f:	ini = f
	| `std.Err e:	std.fatal("couldn't load {}: {}\n", cfg, e)
	;;

	/* global opts */
	tmpdir = std.pathcat(std.getenvv("TMP", "/tmp"), "contbuild-work")
	htmlstyle = inifile.getv(ini, "", "htmlstyle", "/style.css")
	scratch = inifile.getv(ini, "", "scratch", tmpdir)

	/* default 5 minute poll */
	match std.intparse(inifile.getv(ini, "", "period", "300"))
	| `std.Some v:	period = v * std.Sec
	| `std.None:	std.fatal("unable to parse 'period'\n")
	;;

	default.name = ""
	default.repo = inifile.getv(ini, "", "repo", "")
	default.tip = inifile.getv(ini, "", "tip", "master")
	default.remote = inifile.getv(ini, "", "remote", "")
	default.scratch = scratch

	/* report options */
	default.htmldir = inifile.getv(ini, "", "htmldir", "")
	default.htmlroot = inifile.getv(ini, "", "htmlroot", default.htmldir)
	default.htmlstyle = htmlstyle
	default.email = inifile.getv(ini, "", "email", default.email)

	match inifile.get(ini, "", "build")
	| `std.Some b:	default.build = std.strtok(b)
	| `std.None:	default.build = std.sldup(["make"][:])
	;;
	match inifile.get(ini, "", "clean")
	| `std.Some c:	default.clean = std.strtok(c)
	| `std.None:	default.clean = std.sldup(["make", "clean"][:])
	;;
	match inifile.get(ini, "", "test")
	| `std.Some t:	default.test = std.strtok(t)
	| `std.None:	default.test = std.sldup(["make", "check"][:])
	;;
	match inifile.get(ini, "", "fix")
	| `std.Some t:	default.fix = std.strtok(t)
	| `std.None:	default.fix = [][:]
	;;

	/* read the targets */
	targs = [][:]
	for s : inifile.bysection(ini)
		if s.len != 0
			std.slpush(&targs, loadtarg(ini, s, &default))
		;;
	;;

	/* read the build log */
	std.mkpath(scratch)
	logfile = std.pathcat(scratch, "contbuild.log")
	match std.openmode(logfile, std.Ordwr | std.Ocreat, 0o644)
	| `std.Ok fd:	logfd = fd
	| `std.Err e:	std.fatal("could not open build log {}: {}\n", logfile, e)
	;;
	std.slfree(logfile)

	readlog(targs, logfd)


	-> std.mk([
		.logfd=logfd,
		.targs=targs,
		.scratch=scratch,
		.period=period,
		.htmlstyle=htmlstyle,
	])
}

const loadtarg = {ini, s, default
	var repo, tip, remote
	var build, clean, test, fix, scratch
	var htmldir, htmlroot, htmlbase, htmlstyle
	var email

	htmlbase = ""
	tip = inifile.getv(ini, s, "tip", default.tip)
	repo = inifile.getv(ini, s, "repo", default.repo)
	scratch = inifile.getv(ini, s, "scratch", default.scratch)
	remote = inifile.getv(ini, s, "remote", default.remote)

	htmldir = inifile.getv(ini, s, "htmldir", default.htmldir)
	htmlroot = inifile.getv(ini, s, "htmlroot", default.htmlroot)
	htmlstyle = inifile.getv(ini, s, "htmlstyle", default.htmlstyle)
	email = inifile.getv(ini, s, "email", default.email)
	if std.hasprefix(htmldir, htmlroot)
		htmlbase = std.pathcat("/", htmldir[htmlroot.len:])
	;;
	if htmlroot.len == 0
		htmlroot = std.sldup(htmlbase)
	;;


	match inifile.get(ini, s, "build")
	| `std.Some b:	build = std.strtok(b)
	| `std.None:	build = default.build
	;;
	match inifile.get(ini, s, "test")
	| `std.Some t:	test = std.strtok(t)
	| `std.None:	test = default.test
	;;
	match inifile.get(ini, s, "clean")
	| `std.Some c:	clean = std.strtok(c)
	| `std.None:	clean = default.clean
	;;
	match inifile.get(ini, s, "fix")
	| `std.Some f:	fix = std.strtok(f)
	| `std.None:	fix = default.fix
	;;


	-> std.mk([
		.name=std.sldup(s),
		.tip=tip,
		.repo=repo,
		.scratch=scratch,
		.remote=remote,

		.build=build,
		.test=test,
		.clean=clean,
		.fix=fix,

		.htmldir=htmldir,
		.htmlroot=htmlroot,
		.htmlstyle=htmlstyle,
		.email=email,

		._repo=std.pathcat(scratch, s),
		._htmlbase=htmlbase,
		._status=`Succ
	])
}


const readlog = {targs, fd
	var recbuf : byte[:][3]
	var ht, f, rec : byte[:][:]

	ht = std.mkht()
	for t : targs
		std.htput(ht, t.name, t)
	;;
	f = bio.mkfile(fd, bio.Rd)
	for ln : bio.byline(f)
		rec = std.bstrtok(recbuf[:], ln)
		if rec.len == 3
			addresult(ht, rec[0], rec[1], rec[2])
		;;
	;;
	bio.free(f)
	std.htfree(ht)
}

const addresult = {ht, hash, status, targ
	var tt

	tt = std.htget(ht, std.strstrip(targ))
	match (tt, status)
	| (`std.Some t, "true"):
		std.slpush(&t._hist, (std.sldup(hash), true))
		t._status = `Succ
	| (`std.Some t, "false"):
		std.slpush(&t._hist, (std.sldup(hash), false))
		t._status = `Fail
	| _:
		std.put("skip:\t{}: {}: {}\n", hash, status, targ)
	;;
}
